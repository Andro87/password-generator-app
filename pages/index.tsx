import Head from "next/head";

import { JetBrains_Mono } from "next/font/google";
import styles from "@/styles/Home.module.scss";

import { useState } from "react";
import {
    PasswordContainer,
    Slider,
    Checkbox,
    StrengthChecker
} from "@/components";

import Arrow from "svgr/icon-arrow-right.svg";

import { uppercase, lowercase, numbers, symbols } from "@/utils/characters";

const jetBrains = JetBrains_Mono({ subsets: ["latin"] });

export default function Home() {
    const [password, setPassword] = useState("P4$5W0rD!");
    const [passwordData, setPasswordData] = useState({
        length: 0,
        isUppercase: false,
        isLowercase: false,
        isNumbers: false,
        isSymbols: false
    });

    const [isMessage, setIsMessage] = useState(false);
    const [passwordStrength, setPasswordStrength] = useState("");
    const [progressPercentage, setProgressPercentage] = useState(0);

    const countCheckOptions = Object.values(passwordData).filter(
        check => check === true
    ).length;

    const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        const { name, value, type, checked } = e.target;

        setPasswordData(prevData => {
            return {
                ...prevData,
                [name]: type === "checkbox" ? checked : value
            };
        });

        if (name === "length") {
            const passLength = Number(e.target.value);
            const passMaxLength = Number(e.target.max);
            const percentage = (passLength * 100) / passMaxLength;

            setProgressPercentage(percentage);
        }
    };

    const getPassword = () => {
        let allChar = "";

        if (passwordData.isUppercase) {
            allChar += uppercase;
        }
        if (passwordData.isLowercase) {
            allChar += lowercase;
        }
        if (passwordData.isNumbers) {
            allChar += numbers;
        }
        if (passwordData.isSymbols) {
            allChar += symbols;
        }
        if (
            !passwordData.isUppercase &&
            !passwordData.isLowercase &&
            !passwordData.isNumbers &&
            !passwordData.isSymbols
        ) {
            setIsMessage(true);
        } else if (!password.length) {
            setIsMessage(true);
        } else {
            setIsMessage(false);
        }
        if (!allChar) {
            setPassword(" ");
        } else {
            setPassword(getPasswordChar(allChar));
        }
    };

    const getPasswordChar = (char: string) => {
        let pass = "";

        for (let i = 0; i < passwordData.length; i++) {
            const random = Math.floor(Math.random() * char.length);
            pass += char[random];
        }

        return pass;
    };
    const handleStrength = () => {
        if (passwordData.length <= 5 || countCheckOptions <= 1) {
            setPasswordStrength("tooweak");
        } else if (
            (passwordData.length > 5 && passwordData.length <= 10) ||
            countCheckOptions === 2
        ) {
            setPasswordStrength("weak");
        } else if (
            (passwordData.length > 10 && passwordData.length <= 15) ||
            countCheckOptions === 3
        ) {
            setPasswordStrength("medium");
        } else if (
            (passwordData.length > 15 && passwordData.length <= 20) ||
            countCheckOptions === 4
        ) {
            setPasswordStrength("strong");
        }
    };

    const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {
        e.preventDefault();
        getPassword();
        handleStrength();
    };

    return (
        <div className={`${styles.home_container} ${jetBrains.className} `}>
            <Head>
                <title> Password generator app </title>
                <meta
                    name="description"
                    content="Generated by create next app"
                />
                <meta
                    name="viewport"
                    content="width=device-width, initial-scale=1"
                />
                <link rel="icon" href="/assests/images/favicon-32x32.png" />
            </Head>

            <main className={styles.main_container}>
                <h1>password generator</h1>

                <PasswordContainer password={password} isMessage={isMessage} />

                <form className={styles.form_container} onSubmit={handleSubmit}>
                    <Slider
                        length={passwordData.length}
                        onSlider={handleChange}
                        percentage={progressPercentage}
                    />
                    <div className={styles.checkboxes_container}>
                        <Checkbox
                            title="uppercase letters"
                            name="isUppercase"
                            isChecked={passwordData.isUppercase}
                            description="include uppercase letters"
                            onCheck={handleChange}
                        />
                        <Checkbox
                            title="lowercase letters"
                            name="isLowercase"
                            isChecked={passwordData.isLowercase}
                            description="include lowercase letters"
                            onCheck={handleChange}
                        />
                        <Checkbox
                            title="numbers characters"
                            name="isNumbers"
                            isChecked={passwordData.isNumbers}
                            description="include numbers"
                            onCheck={handleChange}
                        />
                        <Checkbox
                            title="symbols characters"
                            name="isSymbols"
                            isChecked={passwordData.isSymbols}
                            description="include symbols"
                            onCheck={handleChange}
                        />
                    </div>
                    <StrengthChecker strength={passwordStrength} />

                    <button
                        title="generate password"
                        className={styles.btn_submit}
                    >
                        generate
                        <span>
                            <Arrow />
                        </span>
                    </button>
                </form>
            </main>
        </div>
    );
}
